// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Toci.Lemiesz.Amms.Database.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241030062608_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConversationEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EntryId"));

                    b.Property<string>("ChatGPTResponse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVoice")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.HasKey("EntryId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SessionId");

                    b.ToTable("ConversationEntries");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessionId"));

                    b.Property<string>("AudioTranscription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChatGPTSummary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("PsychiatristId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SessionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SessionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PsychiatristId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConversationEntry", b =>
                {
                    b.HasOne("User", "Sender")
                        .WithMany("ConversationEntries")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session", "Session")
                        .WithMany("ConversationEntries")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.HasOne("User", "Patient")
                        .WithMany("PatientSessions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "Psychiatrist")
                        .WithMany("PsychiatristSessions")
                        .HasForeignKey("PsychiatristId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Psychiatrist");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Navigation("ConversationEntries");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("ConversationEntries");

                    b.Navigation("PatientSessions");

                    b.Navigation("PsychiatristSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
